#!/usr/bin/env python
"""HethIO agent for monitoring a network and internet.

The heth.io agent is desiged to run as a service on endpoints  
These agents run frequet tests on the host internet connection,
along with reporting other statistical information to help 
customers understand what they are paying for.
"""

import os,signal,sys
import logging
import logging.handlers
import argparse
import time  # this is only being used as part of the example
from ConfigParser import SafeConfigParser # read in config file
import subprocess # for executing other command line programs
import shlex # for spliting strings
from datetime import datetime
import string

#----------------------
# adding for speedtest
import threading
import math
import socket
import timeit
# Used for bound_interface
socket_socket = socket.socket
try:
	from hashlib import md5
except ImportError:
	from md5 import md5
try:
	import xml.etree.cElementTree as ET
except ImportError:
	try:
		import xml.etree.ElementTree as ET
	except ImportError:
		from xml.dom import minidom as DOM
		ET = None
try:
	from urlparse import urlparse
except ImportError:
	from urllib.parse import urlparse

try:
	from urlparse import parse_qs
except ImportError:
	try:
		from urllib.parse import parse_qs
	except ImportError:
		from cgi import parse_qs
try:
	from argparse import ArgumentParser as ArgParser
except ImportError:
	from optparse import OptionParser as ArgParser
try:
	from urllib2 import urlopen, Request, HTTPError, URLError
except ImportError:
	from urllib.request import urlopen, Request, HTTPError, URLError
try:
	from httplib import HTTPConnection, HTTPSConnection
except ImportError:
	from http.client import HTTPConnection, HTTPSConnection
try:
	import builtins
except ImportError:
	def print_(*args, **kwargs):
		"""The new-style print function taken from
		https://pypi.python.org/pypi/six/

		"""
		fp = kwargs.pop("file", sys.stdout)
		if fp is None:
			return

		def write(data):
			if not isinstance(data, basestring):
				data = str(data)
			fp.write(data)

		want_unicode = False
		sep = kwargs.pop("sep", None)
		if sep is not None:
			if isinstance(sep, unicode):
				want_unicode = True
			elif not isinstance(sep, str):
				raise TypeError("sep must be None or a string")
		end = kwargs.pop("end", None)
		if end is not None:
			if isinstance(end, unicode):
				want_unicode = True
			elif not isinstance(end, str):
				raise TypeError("end must be None or a string")
		if kwargs:
			raise TypeError("invalid keyword arguments to print()")
		if not want_unicode:
			for arg in args:
				if isinstance(arg, unicode):
					want_unicode = True
					break
		if want_unicode:
			newline = unicode("\n")
			space = unicode(" ")
		else:
			newline = "\n"
			space = " "
		if sep is None:
			sep = space
		if end is None:
			end = newline
		for i, arg in enumerate(args):
			if i:
				write(sep)
			write(arg)
		write(end)
else:
	print_ = getattr(builtins, 'print')
	del builtins
#----------------------


try:
	from Queue import Queue, Empty
except ImportError:
	from queue import Queue, Empty  # python 3.x


ON_POSIX = 'posix' in sys.builtin_module_names


# Deafults
global CONF_FILENAME, LOG_FILEPATH, LOG_LEVEL
LOG_LEVEL = logging.INFO  # Could be e.g. "DEBUG" or "WARNING"


#MQTT Variables
global __PUBLISH, __SUBSCRIBE, __USERNAME, __BROKER, __SPENABLED
CONF_FILENAME = "/etc/hethio/agent.conf"
LOG_FILEPATH = "/var/log/hethio"
__PUBLISH = "/usr/bin/mosquitto_pub"
__SUBSCRIBE = "/usr/bin/mosquitto_sub"

__BROKER = "heth.io"
__USERNAME = "hethio"
__SPENABLED = True


# Define and parse command line arguments
parser = argparse.ArgumentParser(description="HethIO - Systems Management Service")
parser.add_argument("-c", "--conf", help="configuration file to read from (default '" + CONF_FILENAME + "')")
parser.add_argument("-l", "--log", help="file to write log to (default '" + LOG_FILEPATH + "')")
#parser.add_argument('--speedtest', action="store_true", default=False)

# If the log file is specified on the command line then override the default
args = parser.parse_args()
if args.conf:
	CONF_FILENAME = args.conf

if args.log:
	LOG_FILEPATH = args.log


#=======================================================================================================================
# GENERIC FUNCTIONALITY
def touch(fname):
	if os.path.exists(fname):
		os.utime(fname, None)
	else:
		open(fname, 'a').close()

def deduplicate(seq):
	seen = set()
	seen_add = seen.add
	return [ x for x in seq if not (x in seen or seen_add(x))]

def version():
	global logger
	share_dir = '/usr/share/hethio-agent'
	if os.path.isdir(share_dir):
		version_file = share_dir + '/VERSION.txt'
		if os.path.isfile(version_file):
			with open (version_file, "r") as myversion:
				return myversion.read().replace('\n', '')
		else:
			logger.warning("Missing VERSION File: " + version_file)
	else:
		logger.warning("Missing Share Directory: " + share_dir)
	return "Unknown"

#=======================================================================================================================
# CONFIG

#user defined configuration variables
global id, __minute, __hour, TIMESTAMP, USERS
TIMESTAMP = datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S')
USERS = ""
__minute = 0
__hour = 0
id = -1

def read_config():
	global CONF_FILENAME,id,LOG_LEVEL,LOG_FILEPATH,__BROKER,__USERNAME,__SPENABLED
	# Read in configuration file
	configParser = SafeConfigParser()   
	try:
		configParser.read(CONF_FILENAME)

		# Read global section from config file
		if configParser.has_section('Global'):
			if configParser.has_option('Global','ID'):
				id = configParser.get('Global','ID')
			if configParser.has_option('Global','LogLevel'):
				LOG_LEVEL = configParser.get('Global','LogLevel')
			if configParser.has_option('Global','LogPath'):
				LOG_FILEPATH = configParser.get('Global','LogPath')

		if configParser.has_section('SpeedTest'):
			if configParser.has_option('SpeedTest','ENABLED'):
				__SPENABLED = configParser.get('SpeedTest','ENABLED')
			

		# Read overrides to broker defaults from config file
		if configParser.has_section('Broker'):
			if configParser.has_option('Broker','broker'):
				__BROKER = configParser.get('Broker','broker')
			if configParser.has_option('Broker','username'):
				__USERNAME = configParser.get('Broker','username')

	except IOError:
		print "Unable to open " + CONF_FILENAME


	#create logging path if it doesn't exist
	if not os.path.exists(LOG_FILEPATH):
		os.makedirs(LOG_FILEPATH)

read_config()



#=======================================================================================================================
# LOGGER
global logger

# Configure logging to log to a file, making a new file at midnight and keeping the last 3 day's data
# Give the logger a unique name (good practice)
logger = logging.getLogger(__name__)
# Set the log level to LOG_LEVEL
logger.setLevel(LOG_LEVEL)

# Make a handler that writes to a file, making a new file at midnight and keeping 3 backups
try :
	handler = logging.handlers.TimedRotatingFileHandler(LOG_FILEPATH + "/agent.log", when="midnight", backupCount=3)
except IOError:
	touch(LOG_FILEPATH + "/agent.log")
# Format each log message like this
formatter = logging.Formatter('%(asctime)s %(levelname)-8s %(message)s')
# Attach the formatter to the handler
handler.setFormatter(formatter)
# Attach the handler to the logger
logger.addHandler(handler)

# Make a class we can use to capture stdout and sterr in the log
class MyLogger(object):
	def __init__(self, logger, level):
		"""Needs a logger and a logger level."""
		self.logger = logger
		self.level = level

	def write(self, message):
		"""Only log if there is a message (not just a new line)"""
		if message.rstrip() != "":
			self.logger.log(self.level, message.rstrip())

	def flush(self):
		pass

# Replace stdout with logging to file at INFO level
sys.stdout = MyLogger(logger, logging.INFO)
# Replace stderr with logging to file at ERROR level
sys.stderr = MyLogger(logger, logging.ERROR)







#=======================================================================================================================
# FUNCTIONALITY

def publish(topic, msg):
	"""Publish specified msg to specified topic using mosquitto tools"""
	global __BROKER, __USERNAME, logger, __PUBLISH, os
	if os.path.isfile(__PUBLISH):
		command_line = __PUBLISH + " -t '" + topic + "' -m '" + msg + "' -h '" + __BROKER + "' -u '" + __USERNAME + "'"
		logger.info(command_line)
		args = shlex.split(command_line)
		p1 = subprocess.Popen(args, stdout=subprocess.PIPE)
		output = p1.communicate()[0]
		return output
	else:
		logger.warning("Missing Publishing Utility (" + __PUBLISH + ")")
		return "Unable to publish message."



#########################################################################################################
# REGISTER WITH THE BROKER NETWORK
def heartbeat():
	"""Sends a heartbeat to the broker network."""
	global id, logger, TIMESTAMP
	output = publish("/heartbeat", "{\"agent\":\"" + str(id) + "\",\"timestamp\":\"" + TIMESTAMP + "\"}")
	return output
#########################################################################################################




#########################################################################################################
# READ AND REPORT CURRENTLY LOGGED IN USERS
def logged_in_users():
	global id, logger, TIMESTAMP, USERS
	command_line = "who"
	args = shlex.split(command_line)
	p1 = subprocess.Popen(args,stdout=subprocess.PIPE)
	output = p1.communicate()[0].splitlines()

	users = []
	j = -1
	for line in output:
		j = j + 1
		users.append( line.split()[0] )
	users = deduplicate(users)
	logger.info(command_line + " is logged in => " + string.join(users))

	if string.join(users) != USERS:
		USERS = string.join(users)
		msg = "{\"agent\":\"" + str(id) + "\",\"users\":\""
		if len(users) > 0:
			for user in users:
				msg = msg + user + ","
			msg = msg[:-1]

		msg = msg + "\",\"timestamp\":\"" + TIMESTAMP + "\"}"
		output = publish("/logged_in_users", msg)
		print output
	return;
#########################################################################################################





#########################################################################################################
# TEST INTERNET SPEED
def bound_socket(*args, **kwargs):
	"""Bind socket to a specified source IP address"""

	global source
	sock = socket_socket(*args, **kwargs)
	sock.bind((source, 0))
	return sock

def distance(origin, destination):
	"""Determine distance between 2 sets of [lat,lon] in km"""

	lat1, lon1 = origin
	lat2, lon2 = destination
	radius = 6371  # km

	dlat = math.radians(lat2 - lat1)
	dlon = math.radians(lon2 - lon1)
	a = (math.sin(dlat / 2) * math.sin(dlat / 2) + math.cos(math.radians(lat1))
		 * math.cos(math.radians(lat2)) * math.sin(dlon / 2)
		 * math.sin(dlon / 2))
	c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
	d = radius * c

	return d

class FileGetter(threading.Thread):
	"""Thread class for retrieving a URL"""

	def __init__(self, url, start):
		self.url = url
		self.result = None
		self.starttime = start
		threading.Thread.__init__(self)

	def run(self):
		self.result = [0]
		try:
			if (timeit.default_timer() - self.starttime) <= 10:
				f = urlopen(self.url)
				while 1 and not shutdown_event.isSet():
					self.result.append(len(f.read(10240)))
					if self.result[-1] == 0:
						break
				f.close()
		except IOError:
			pass

def downloadSpeed(files, quiet=True):
	"""Function to launch FileGetter threads and calculate download speeds"""

	start = timeit.default_timer()

	def producer(q, files):
		for file in files:
			thread = FileGetter(file, start)
			thread.start()
			q.put(thread, True)
			#if not quiet and not shutdown_event.isSet():
			#    sys.stdout.write('.')
			#    sys.stdout.flush()

	finished = []

	def consumer(q, total_files):
		while len(finished) < total_files:
			thread = q.get(True)
			while thread.isAlive():
				thread.join(timeout=0.1)
			finished.append(sum(thread.result))
			del thread

	q = Queue(6)
	prod_thread = threading.Thread(target=producer, args=(q, files))
	cons_thread = threading.Thread(target=consumer, args=(q, len(files)))
	start = timeit.default_timer()
	prod_thread.start()
	cons_thread.start()
	while prod_thread.isAlive():
		prod_thread.join(timeout=0.1)
	while cons_thread.isAlive():
		cons_thread.join(timeout=0.1)
	return (sum(finished) / (timeit.default_timer() - start))

class FilePutter(threading.Thread):
	"""Thread class for putting a URL"""

	def __init__(self, url, start, size):
		self.url = url
		chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
		data = chars * (int(round(int(size) / 36.0)))
		self.data = ('content1=%s' % data[0:int(size) - 9]).encode()
		del data
		self.result = None
		self.starttime = start
		threading.Thread.__init__(self)

	def run(self):
		try:
			if ((timeit.default_timer() - self.starttime) <= 10 and
					not shutdown_event.isSet()):
				f = urlopen(self.url, self.data)
				f.read(11)
				f.close()
				self.result = len(self.data)
			else:
				self.result = 0
		except IOError:
			self.result = 0

def uploadSpeed(url, sizes, quiet=True):
	"""Function to launch FilePutter threads and calculate upload speeds"""

	start = timeit.default_timer()

	def producer(q, sizes):
		for size in sizes:
			thread = FilePutter(url, start, size)
			thread.start()
			q.put(thread, True)
			#if not quiet and not shutdown_event.isSet():
			#    sys.stdout.write('.')
			##    sys.stdout.flush()

	finished = []

	def consumer(q, total_sizes):
		while len(finished) < total_sizes:
			thread = q.get(True)
			while thread.isAlive():
				thread.join(timeout=0.1)
			finished.append(thread.result)
			del thread

	q = Queue(6)
	prod_thread = threading.Thread(target=producer, args=(q, sizes))
	cons_thread = threading.Thread(target=consumer, args=(q, len(sizes)))
	start = timeit.default_timer()
	prod_thread.start()
	cons_thread.start()
	while prod_thread.isAlive():
		prod_thread.join(timeout=0.1)
	while cons_thread.isAlive():
		cons_thread.join(timeout=0.1)
	return (sum(finished) / (timeit.default_timer() - start))

def getAttributesByTagName(dom, tagName):
	"""Retrieve an attribute from an XML document and return it in a
	consistent format

	Only used with xml.dom.minidom, which is likely only to be used
	with python versions older than 2.5
	"""
	elem = dom.getElementsByTagName(tagName)[0]
	return dict(list(elem.attributes.items()))

def getBestServer(servers):
	"""Perform a speedtest.net latency request to determine which
	speedtest.net server has the lowest latency
	"""

	results = {}
	for server in servers:
		cum = []
		url = '%s/latency.txt' % os.path.dirname(server['url'])
		urlparts = urlparse(url)
		for i in range(0, 3):
			try:
				if urlparts[0] == 'https':
					h = HTTPSConnection(urlparts[1])
				else:
					h = HTTPConnection(urlparts[1])
				start = timeit.default_timer()
				h.request("GET", urlparts[2])
				r = h.getresponse()
				total = (timeit.default_timer() - start)
			except (HTTPError, URLError):
				cum.append(3600)
				continue
			text = r.read(9)
			if int(r.status) == 200 and text == 'test=test'.encode():
				cum.append(total)
			else:
				cum.append(3600)
			h.close()
		avg = round((sum(cum) / 6) * 1000, 3)
		results[avg] = server
	fastest = sorted(results.keys())[0]
	best = results[fastest]
	best['latency'] = fastest

	return best

def getConfig():
	"""Download the speedtest.net configuration and return only the data
	we are interested in
	"""

	uh = urlopen('http://www.speedtest.net/speedtest-config.php')
	configxml = []
	while 1:
		configxml.append(uh.read(10240))
		if len(configxml[-1]) == 0:
			break
	if int(uh.code) != 200:
		return None
	uh.close()
	try:
		try:
			root = ET.fromstring(''.encode().join(configxml))
			config = {
				'client': root.find('client').attrib,
				'times': root.find('times').attrib,
				'download': root.find('download').attrib,
				'upload': root.find('upload').attrib}
		except AttributeError:
			root = DOM.parseString(''.join(configxml))
			config = {
				'client': getAttributesByTagName(root, 'client'),
				'times': getAttributesByTagName(root, 'times'),
				'download': getAttributesByTagName(root, 'download'),
				'upload': getAttributesByTagName(root, 'upload')}
	except SyntaxError:
		print_('Failed to parse speedtest.net configuration')
		return None #sys.exit(1)
	del root
	del configxml
	return config

def closestServers(client, all=False):
	"""Determine the 5 closest speedtest.net servers based on geographic
	distance
	"""

	uh = urlopen('http://c.speedtest.net/speedtest-servers-static.php')
	serversxml = []
	while 1:
		serversxml.append(uh.read(10240))
		if len(serversxml[-1]) == 0:
			break
	if int(uh.code) != 200:
		return None
	uh.close()
	try:
		try:
			root = ET.fromstring(''.encode().join(serversxml))
			elements = root.getiterator('server')
		except AttributeError:
			root = DOM.parseString(''.join(serversxml))
			elements = root.getElementsByTagName('server')
	except SyntaxError:
		print_('Failed to parse list of speedtest.net servers')
		return None #sys.exit(1)
	servers = {}
	for server in elements:
		try:
			attrib = server.attrib
		except AttributeError:
			attrib = dict(list(server.attributes.items()))
		d = distance([float(client['lat']), float(client['lon'])],
					 [float(attrib.get('lat')), float(attrib.get('lon'))])
		attrib['d'] = d
		if d not in servers:
			servers[d] = [attrib]
		else:
			servers[d].append(attrib)
	del root
	del serversxml
	del elements

	closest = []
	for d in sorted(servers.keys()):
		for s in servers[d]:
			closest.append(s)
			if len(closest) == 5 and not all:
				break
		else:
			continue
		break

	del servers
	return closest

def ctrl_c(signum, frame):
	"""Catch Ctrl-C key sequence and set a shutdown_event for our threaded
	operations
	"""

	global shutdown_event
	shutdown_event.set()
	raise SystemExit('\nCancelling...')

def speedtest():
	"""Run the full speedtest.net test"""

	global shutdown_event, source, logger
	shutdown_event = threading.Event()

	#signal.signal(signal.SIGINT, ctrl_c)

	
	options = parser.parse_args()
	if isinstance(options, tuple):
		args = options[0]
	else:
		args = options
	del options

	
	try:
		config = getConfig()
		if config == None:
			logger.warning("Cannot retrieve speedtest configuration")
			return;
	except URLError:
		logger.warning('Cannot retrieve speedtest configuration')
		#sys.exit(1)
		return;

	print_('Retrieving speedtest.net server list...')
	servers = closestServers(config['client'])

	print_("Internet Service Provider: %(isp)s" % config['client'])
	print_("Public IP Address: %(ip)s" % config['client'])
	


	best = getBestServer(servers)

	# Python 2.7 and newer seem to be ok with the resultant encoding
	# from parsing the XML, but older versions have some issues.
	# This block should detect whether we need to encode or not
	try:
		unicode()
		print_(('Hosted by %(sponsor)s (%(name)s) [%(d)0.2f km]: '
			   '%(latency)s ms' % best).encode('utf-8', 'ignore'))
	except NameError:
		print_('Hosted by %(sponsor)s (%(name)s) [%(d)0.2f km]: '
			   '%(latency)s ms' % best)

	sizes = [350, 500, 750, 1000, 1500, 2000, 2500, 3000, 3500, 4000]
	urls = []
	for size in sizes:
		for i in range(0, 4):
			urls.append('%s/random%sx%s.jpg' %
						(os.path.dirname(best['url']), size, size))
	
	print_('Testing download speed', end='')
	dlspeed = downloadSpeed(urls, False)
	
	print_()
	print_('Download: %0.2f M%s/s' % ((dlspeed / 1000 / 1000) * 8, 1))

	sizesizes = [int(.25 * 1000 * 1000), int(.5 * 1000 * 1000)]
	sizes = []
	for size in sizesizes:
		for i in range(0, 25):
			sizes.append(size)
	
	print_('Testing upload speed', end='')
	ulspeed = uploadSpeed(best['url'], sizes, False)
	
	print_()
	print_('Upload: %0.2f M%s/s' % ((ulspeed / 1000 / 1000) * 8, 1))


	# NOW PUBLISH 
	dlspeedk = round((dlspeed / 1000 / 1000) * 8, 2)
	ping = int(round(best['latency'], 0))
	ulspeedk = round((ulspeed / 1000 / 1000) * 8, 2)

	msg = "{"
	msg = msg + "\"agent\":\"" + str(id) + "\","
	msg = msg + "\"download\":\"" + str(dlspeedk) + "\","
	msg = msg + "\"upload\":\"" + str(ulspeedk) + "\","
	msg = msg + "\"ping\":\"" + str(ping) + "\","
	msg = msg + ("\"isp\":\"%(isp)s\"," % config['client'])
	msg = msg + ("\"ip\":\"%(ip)s\"," % config['client'])
	msg = msg + "\"timestamp\":\"" + TIMESTAMP + "\"}"
	output = publish("/speedtest", msg)
	print output
	return;
#########################################################################################################



#=======================================================================================================================


# THIS FUNCTION IS EXECUTED EVERY MINUTE
def every_minute():
	global logger,__minute
	logger.info("Minute Elapsed")
	#logger.info("The counter is now " + str(i))
	#print "This is a print"
	
	read_config() #reload config every minute

	try:
		logged_in_users()
	except:
		logger.error("logged_in_users failed")

	__minute = __minute + 1
	return;

# THIS FUNCTION IS EXECUTED EVERY HOUR
def every_hour():
	global logger,__minute, __hour, __SPENABLED
	if __minute >= 60: # EVERY HOUR
		logger.info("Hour Elapsed")

		try:
			heartbeat()
		except:
			logger.error("heartbeat failed")

		if __SPENABLED:
			try:
				speedtest()
			except:
				logger.error("speedtest failed")

		__minute = 0
		__hour = __hour + 1
	return;

# THIS FUNCTION IS EXECUTED EVERY HOUR
def every_day():
	global logger,__hour
	if __hour >= 24: # EVERY HOUR
		logger.info("Hour Elapsed")

		#do something every 24 hours

		__hour = 0
	return;



def set_exit_handler(func):
    signal.signal(signal.SIGTERM, func)
def on_exit(sig, func=None):
    print "exit handler triggered"
    sys.exit(1)

#=======================================================================================================================
# MAIN DAEMON LOOP


def main():
	global logger,TIMESTAMP
	output = publish("/agent", "{\"agent\":\"" + str(id) + "\",\"status\":\"agent v" + version() + " started\",\"timestamp\":\"" + TIMESTAMP + "\"}")
	print output

	try:
		oldepoch = int(time.time()) - 3600
		# Loop forever, doing something useful hopefully:
		while True:
			epoch = int(time.time()) #get current unix timestamp
			TIMESTAMP = datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S')

			if epoch - oldepoch >= 60: # EVERY MINUTE
				every_hour()
				every_minute()
				every_day()

			oldepoch = epoch
			time.sleep(60)
	except:
		output = publish("/agent", "{\"agent\":\"" + str(id) + "\",\"status\":\"agent v" + version() + " stopped\",\"timestamp\":\"" + TIMESTAMP + "\"}")
		print output



if __name__ == '__main__':
	set_exit_handler(on_exit)
	main()